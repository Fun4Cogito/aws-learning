AWSTemplateFormatVersion: "2010-09-09"
Resources:
  TestServer:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0a7704dfcc8c70a27
      InstanceType: t2.medium # t2.micro
      KeyName: redis-client
      NetworkInterfaces: 
      - AssociatePublicIpAddress: true
        DeviceIndex: 0
        GroupSet: 
          - !Ref TestServerSecurityGroup
        SubnetId: subnet-0df8ac1e84023a09b
  TestServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: TestServerSecurityGroup
      GroupName: TestServerSecurityGroup
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
          CidrIp: 0.0.0.0/0
      VpcId: vpc-0788cef103e65d889
      Tags:
        - Key: Name
          Value: TestServerSecurityGroup
  TestWebServer:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0bba69335379e17f8
      InstanceType: t2.micro # t2.micro
      KeyName: redis-client
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          cd /etc
          python3 -m http.server
      NetworkInterfaces: 
      - AssociatePublicIpAddress: false
        DeviceIndex: 0
        GroupSet: 
          - !Ref TestWebServerSecurityGroup
        SubnetId: subnet-087b73ed079fbdadc
  TestWebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: TestWebServerSecurityGroup
      GroupName: TestWebServerSecurityGroup
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref TestServerSecurityGroup
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          SourceSecurityGroupId: !Ref TestServerSecurityGroup
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          SourceSecurityGroupId: !Ref ALBSecurityGroup
      VpcId: vpc-0788cef103e65d889
      Tags:
        - Key: Name
          Value: TestWebServerSecurityGroup
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internal
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Subnets:
        - subnet-0df8ac1e84023a09b
        - subnet-03f2dea888604b427
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: ALBSecurityGroup
      GroupName: ALBSecurityGroup
      SecurityGroupIngress: 
        - SourceSecurityGroupId: !Ref TestServerSecurityGroup
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
      VpcId: vpc-0788cef103e65d889
      Tags:
        - Key: Name
          Value: ALBSecurityGroup
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-TLS13-1-2-2021-06
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Host: "#{host}"
            Path: "/index.html"
            Protocol: HTTPS
            Port: 443
            StatusCode: HTTP_301
      Certificates:
        - CertificateArn: arn:aws:acm:ap-northeast-1:977565376628:certificate/f9de163d-318d-4f22-adb2-384690e4f087
  ALBListenerRule100:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref ALBListener
      Priority: 100
      Actions:
        - Type: forward
          TargetGroupArn: !Ref ALBBackTargetGroup
      Conditions:
        - Field: path-pattern
          Values: ["/cron.d/*"]

  ALBListenerRule200:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref ALBListener
      Priority: 200
      Actions:
        - Type: forward
          TargetGroupArn: !Ref ALBFrontTargetGroup
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              ["/index.html", "/assets/*"]

  ALBFrontTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: vpc-0788cef103e65d889
      Protocol: HTTPS
      Port: 443
      TargetType: ip
      # Targets:
      #   - Id: "172.31.48.0/24"
      #     Port: 443
      #   - Id: "172.31.49.0/24"
      #     Port: 443
      HealthCheckEnabled: True
      HealthCheckProtocol: HTTP
      HealthCheckPort: 80
      HealthCheckPath: "/"
      Matcher:
        HttpCode: 307,405

  ALBBackTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: vpc-0788cef103e65d889
      Protocol: HTTP
      Port: 8000
      TargetType: ip
      # Targets:
      #   - Id: "172.31.48.0/24"
      #     Port: 8000
      HealthCheckEnabled: True
      HealthCheckProtocol: HTTP
      HealthCheckPath: "/"
      Matcher:
        HttpCode: 200

  VpcEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: VpcEndpointSecurityGroup
      GroupName: VpcEndpointSecurityGroup
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref ALBSecurityGroup
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
        - SourceSecurityGroupId: !Ref ALBSecurityGroup
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
      VpcId: vpc-0788cef103e65d889
      Tags:
        - Key: Name
          Value: VpcEndpointSecurityGroup
  VpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      SecurityGroupIds:
        - !Ref VpcEndpointSecurityGroup
      ServiceName: com.amazonaws.ap-northeast-1.s3
      SubnetIds:
        - subnet-014e37b8073dd6a06
        - subnet-087b73ed079fbdadc
      VpcEndpointType: Interface
      VpcId: vpc-0788cef103e65d889
  WebBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: test.macbase.int
      AccessControl: Private
  WebBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          Sid: WebBucketPolicy
          Effect: Allow
          Principal: "*"
          Action: s3:GetObject
          Resource:
            - arn:aws:s3:::test.macbase.int
            - arn:aws:s3:::test.macbase.int/*
          Condition:
            StringEquals:
              aws:SourceVpce: !Ref VpcEndpoint
